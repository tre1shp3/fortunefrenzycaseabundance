local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local pet = "None"
local rarity = "None"
local voidgold = "Void"
local doto = "Golden"

local Window = Rayfield:CreateWindow({
   Name = "Maze Simulator Remote Raper",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Loading your raper!",
   LoadingSubtitle = "by ActuallyAverages",
   Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Pets", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Pet Maker")

local Input = Tab:CreateInput({
   Name = "Set the pet to rape!",
   CurrentValue = "",
   PlaceholderText = "(Set your pet. First letter should be capital)",
   RemoveTextAfterFocusLost = false,
   Flag = "PetSet",
   Callback = function(Text)
        pet = Text
   end,
})

local Input2 = Tab:CreateInput({
   Name = "Set the rarity to rape!",
   CurrentValue = "",
   PlaceholderText = "(Set your rarity. Can be anything)",
   RemoveTextAfterFocusLost = false,
   Flag = "RaritySet",
   Callback = function(Text)
        rarity = Text
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Void or Golden",
   Options = {"Void","Golden"},
   CurrentOption = {"Void"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   voidgold = table.concat(Options," ")
   if voidgold == "Void" then
        doto = "Golden"
    elseif voidgold == "Golden" then
        doto = "Normal"
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "Rape it!",
   Callback = function()
        local inven = game.Players.LocalPlayer.PlayerGui.PetsGui.Frame.MainFrame.MainFrame.Inventory
local alreadydone = false

local toworld = {
    [1] = "World1"
}

game:GetService("ReplicatedStorage").Remotes.Portal.UpdateLastVisit:FireServer(unpack(toworld))


    inven.ChildAdded:Connect(function(child)
    if child:IsA("Frame") then
    if alreadydone == false then
        alreadydone = true
        local args = {
    [1] = {
        [1] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = doto,
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        },
        [2] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = doto,
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        },
        [3] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = doto,
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        },
        [4] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = doto,
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        },
        [5] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = doto,
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        }
    },
    [2] = 100
}
game:GetService("ReplicatedStorage").Remotes.Pets:FindFirstChild("Craft"..voidgold.."Pet"):FireServer(unpack(args))
    end
    end
end)

	game:GetService("ReplicatedStorage").Remotes.Eggs.CancelCooldown:FireServer()
	local args2 = {
	    [1] = "Basic Egg",
 	   	[2] = 1
	}
	game:GetService("ReplicatedStorage").Remotes.Eggs.Hatch:InvokeServer(unpack(args2))

local args8 = {
    [1] = "Pet raped. If failed try again.",
    [2] = "error"
}

game:GetService("ReplicatedStorage").Remotes.Announce.Announce:FireServer(unpack(args8))

   end,
})

local Button = Tab:CreateButton({
   Name = "Rape Best Pet!",
   Callback = function()
        local inven = game.Players.LocalPlayer.PlayerGui.PetsGui.Frame.MainFrame.MainFrame.Inventory
local alreadydone = false
local pet = "Venomshade"
local rarity = "Developer"

local toworld = {
    [1] = "World1"
}

game:GetService("ReplicatedStorage").Remotes.Portal.UpdateLastVisit:FireServer(unpack(toworld))


    inven.ChildAdded:Connect(function(child)
    if child:IsA("Frame") then
    if alreadydone == false then
        alreadydone = true
        local args = {
    [1] = {
        [1] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = "Golden",
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        },
        [2] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = "Golden",
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        },
        [3] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = "Golden",
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        },
        [4] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = "Golden",
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        },
        [5] = {
            ["Type"] = "Huge",
            ["UUID"] = child.Name,
            ["Variant"] = "Golden",
            ["Experience"] = 0,
            ["Name"] = pet,
            ["Model"] = pet,
            ["Locked"] = false,
            ["Level"] = 20,
            ["Equipped"] = false,
            ["Rarity"] = rarity
        }
    },
    [2] = 100
}
game:GetService("ReplicatedStorage").Remotes.Pets.CraftVoidPet:FireServer(unpack(args))
    end
    end
end)

	game:GetService("ReplicatedStorage").Remotes.Eggs.CancelCooldown:FireServer()
	local args2 = {
	    [1] = "Basic Egg",
 	   	[2] = 1
	}
	game:GetService("ReplicatedStorage").Remotes.Eggs.Hatch:InvokeServer(unpack(args2))

    local args8 = {
    [1] = "Pet raped. If failed try again.",
    [2] = "error"
}

game:GetService("ReplicatedStorage").Remotes.Announce.Announce:FireServer(unpack(args8))

   end,
})

local Section2 = Tab:CreateSection("Pet Destroyer")

local Button = Tab:CreateButton({
   Name = "Button Example",
   Callback = function()
   local inven = game.Players.LocalPlayer.PlayerGui.PetsGui.Frame.MainFrame.MainFrame.Inventory

for i, v in pairs(inven:GetChildren()) do
    if v:IsA("Frame") and v.Name ~= "Template" then
        local args = {
           [1] = v.Name
        }
        game:GetService("ReplicatedStorage").Remotes.Pets.DeletePet:FireServer(unpack(args))

    end
end

local done = 0

repeat
done += 1
    local args2 = {
    [1] = "You have raped your pets! Haha.",
    [2] = "Error"
}

game:GetService("ReplicatedStorage").Remotes.Announce.Announce:FireServer(unpack(args2))
wait(0.01)
until done == 3
   end,
})

local Tab = Window:CreateTab("Books", 4483362458) -- Title, Image

local Section3 = Tab:CreateSection("Book Raper")

local Button = Tab:CreateButton({
   Name = "Get All Books",
   Callback = function()
        for i, v in pairs(game.ReplicatedStorage.Items:GetChildren()) do
            local args = {
                [1] = v.Name
            }
            game.ReplicatedStorage.Remotes.Items.GiveItem:FireServer(unpack(args))
        end
   end,
})

Rayfield:LoadConfiguration()
